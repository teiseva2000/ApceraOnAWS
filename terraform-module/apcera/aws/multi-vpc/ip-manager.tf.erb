<%
  config = {}
  eval File.read("./vpc-layout.rb")
  cluster_name = config[:cluster_name]
  VPC_list = config[:VPC_list]
  extra_tags = config[:extra_tags]
%>
# This module will create an IP Manager in each workload VPC
# if the 'extras' list for that VPC includes 'ip-manager'

##########
# INPUTS #
##########

variable "aws_ip_manager_instance_type" {
  default = "t2.small"
}

#############################################
# apcera-aws ip manager module resources #
#############################################

<%
  VPC_list.each_with_index do |vpc, index|
  next unless vpc[:role] == 'workload'
  next unless vpc[:extras] && vpc[:extras].include?("ip-manager")

  if vpc[:connectivity] == 'internal'
%>
resource "aws_network_interface" "<%= vpc[:name] %>-ip-manager" {
  provider = "aws.<%= vpc[:name] %>"
  tags = {
    Name = "${var.cluster_name}-<%= vpc[:name] %>-ip-manager"
<%= extra_tags %>
  }
  subnet_id = "${aws_subnet.<%= vpc[:name] %>-primary.id}"
  security_groups = ["${aws_security_group.<%= vpc[:name] %>-default.id}"]
  source_dest_check = false
  attachment {
    instance = "${module.apcera-ip-manager-<%= vpc[:name] %>.instances}"
    device_index = 1
  }
}
<% else %>
resource "aws_eip" "<%= vpc[:name] %>-ip-manager" {
  provider = "aws.<%= vpc[:name] %>"
  instance = "${module.apcera-ip-manager-<%= vpc[:name] %>.instances}"
  vpc = true
}
<% end %>

module "apcera-ip-manager-<%= vpc[:name] %>" {
  source = "../compute-resource-with-tags"

  # Provider configuration
  aws_access_key = "${var.aws_access_key}"
  aws_secret_key = "${var.aws_secret_key}"
  aws_region = "${var.<%= vpc[:name] %>_aws_region}"

  # AWS region/AZ specific config
  aws_availability_zone = "${var.<%= vpc[:name] %>_aws_region}${var.<%= vpc[:name] %>_az_primary}"
  aws_ami = "${var.<%= vpc[:name] %>_aws_base_ami}"

  # AWS resource config
  aws_instance_type = "${var.aws_ip_manager_instance_type}"
  aws_ssh_key = "${var.<%= vpc[:name] %>_aws_ssh_key}"

  # VPC specific config
  aws_subnet = "${aws_subnet.<%= vpc[:name] %>-primary.id}"
  aws_security_group = "${aws_security_group.<%= vpc[:name] %>-dmz.id}"

  # Cluster config, sizing, etc
  count = 1
  cluster_name = "${var.cluster_name}"
  name = "${var.cluster_name}-<%= vpc[:name] %>-ip-manager}"
  aws_user_data = "${var.aws_user_data}"

  # Extra tags
<%
config[:extra_vars].each do |key, value|
%>
  <%= key %> = "${var.<%= key %>}"
<% end %>
}
<% end %>

###########
# OUTPUTS #
###########

<%
VPC_list.each_with_index do |vpc, index|
  next unless vpc[:role] == 'workload'
  next unless vpc[:extras] && vpc[:extras].include?("ip-manager")
%>
output "<%= vpc[:name] %>-ip-manager-address" {
  value = "${module.apcera-ip-manager-<%= vpc[:name] %>.addresses}"
}

<% if vpc[:connectivity] == 'internal' %>
output "<%= vpc[:name] %>-ip-manager-floating-address" {
  value = "${join("', '", aws_network_interface.<%= vpc[:name] %>-ip-manager.private_ips)}"
}
<% else %>
output "<%= vpc[:name] %>-ip-manager-public-address" {
  value = "${aws_eip.<%= vpc[:name] %>-ip-manager.public_ip}"
}
<% end %>
<% end %>
