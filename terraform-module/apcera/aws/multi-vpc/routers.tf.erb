<%
  config = {}
  eval File.read("./vpc-layout.rb")
  cluster_name = config[:cluster_name]
  VPC_list = config[:VPC_list]
  extra_tags = config[:extra_tags]
%>
# This module will create a configurable number of routers in each
# 'workload VPC.  The IP addresses of the resulting hosts are
# available as output 'router-addresses', in a format suitable for
# including into a cluster.conf host list.


##########
# INPUTS #
##########

<%
  VPC_list.each_with_index do |vpc, index|
  next unless vpc[:role] == 'workload'
  next unless vpc[:extras] && vpc[:extras].include?("router")
%>
variable "<%= vpc[:name] %>_aws_router_type" {
  description = "Name of the AWS instance size to use"
  default = "m3.medium"
}

variable "<%= vpc[:name] %>_router_count_per_AZ" {
  default = 1
}
<% end %>

########################################
# router module resources for all VPCs #
########################################

<%
  VPC_list.each_with_index do |vpc, index|
  next unless vpc[:role] == 'workload'
  next unless vpc[:extras] && vpc[:extras].include?("router")
%>
resource "aws_elb" "<%= vpc[:name] %>-router" {
  provider = "aws.<%= vpc[:name] %>"
  tags = {
    Name = "${var.cluster_name}-<%= vpc[:name] %>"
<%= extra_tags %>
  }
  name = "${var.cluster_name}-<%= vpc[:name] %>"

  security_groups = ["${aws_security_group.<%= vpc[:name] %>-elb.id}"]

  listener {
    instance_port = "${lookup(var.router_backend_http, var.proxy_protocol_enable)}"
    instance_protocol = "tcp"
    lb_port = 80
    lb_protocol = "tcp"
  }

  listener {
    instance_port = "${lookup(var.router_backend_https, var.proxy_protocol_enable)}"
    instance_protocol = "tcp"
    lb_port = 443
    lb_protocol = "tcp"
  }

  health_check {
    healthy_threshold = 3
    unhealthy_threshold = 5
    timeout = 3
    target = "TCP:8080"
    interval = 30
  }
  
  # The instance to register automatically
<% if vpc[:availability_zones] == 2 %>
  subnets = ["${aws_subnet.<%= vpc[:name] %>-primary.id}","${aws_subnet.<%= vpc[:name] %>-secondary.id}"]
  instances = ["${split(",",module.apcera-router-primary-<%= vpc[:name] %>.instances)}",
               "${split(",",module.apcera-router-secondary-<%= vpc[:name] %>.instances)}"]
<% else %>
  subnets = ["${aws_subnet.<%= vpc[:name] %>-primary.id}","${aws_subnet.<%= vpc[:name] %>-secondary.id}","${aws_subnet.<%= vpc[:name] %>-tertiary.id}"]
  instances = ["${split(",",module.apcera-router-primary-<%= vpc[:name] %>.instances)}",
               "${split(",",module.apcera-router-secondary-<%= vpc[:name] %>.instances)}",
               "${split(",",module.apcera-router-tertiary-<%= vpc[:name] %>.instances)}"]
<% end %>

<% if vpc[:connectivity] == 'internal' %>
  internal = true
<% end %>
}

# We always attach the policy stating proxy protocol to some ports on the
# backend, so whether this applies or not depends entirely on `instance_port`
# within the aws_elb.router above.
resource "aws_proxy_protocol_policy" "<%= vpc[:name] %>-router_proxy" {
  provider = "aws.<%= vpc[:name] %>"
  load_balancer = "${aws_elb.<%= vpc[:name] %>-router.name}"
  instance_ports = [8480, 8433]
}

module "apcera-router-primary-<%= vpc[:name] %>" {
  source = "../compute-resource-with-tags"

  # Provider configuration
  aws_access_key = "${var.aws_access_key}"
  aws_secret_key = "${var.aws_secret_key}"
  aws_region = "${var.<%= vpc[:name] %>_aws_region}"

  # AWS region/AZ specific config
  aws_availability_zone = "${var.<%= vpc[:name] %>_aws_region}${var.<%= vpc[:name] %>_az_primary}"
  aws_ami = "${var.<%= vpc[:name] %>_aws_base_ami}"

  # AWS resource config
  aws_instance_type = "${var.<%= vpc[:name] %>_aws_router_type}"
  aws_ssh_key = "${var.<%= vpc[:name] %>_aws_ssh_key}"

  # VPC specific config
  aws_subnet = "${aws_subnet.<%= vpc[:name] %>-primary.id}"
  aws_security_group = "${aws_security_group.<%= vpc[:name] %>-default.id}"

  # Cluster config, sizing, etc
  cluster_name = "${var.cluster_name}"
  name = "${var.cluster_name}-<%= vpc[:name] %>-router-primary"
  count = "${var.<%= vpc[:name] %>_router_count_per_AZ}"
  aws_user_data = "${var.aws_user_data}"

  # Extra tags
<%
config[:extra_vars].each do |key, value|
%>
  <%= key %> = "${var.<%= key %>}"
<% end %>
}

module "apcera-router-secondary-<%= vpc[:name] %>" {
  source = "../compute-resource-with-tags"

  # Provider configuration
  aws_access_key = "${var.aws_access_key}"
  aws_secret_key = "${var.aws_secret_key}"
  aws_region = "${var.<%= vpc[:name] %>_aws_region}"

  # AWS region/AZ specific config
  aws_availability_zone = "${var.<%= vpc[:name] %>_aws_region}${var.<%= vpc[:name] %>_az_secondary}"
  aws_ami = "${var.<%= vpc[:name] %>_aws_base_ami}"

  # AWS resource config
  aws_instance_type = "${var.<%= vpc[:name] %>_aws_router_type}"
  aws_ssh_key = "${var.<%= vpc[:name] %>_aws_ssh_key}"

  # VPC specific config
  aws_subnet = "${aws_subnet.<%= vpc[:name] %>-secondary.id}"
  aws_security_group = "${aws_security_group.<%= vpc[:name] %>-default.id}"

  # Cluster config, sizing, etc
  cluster_name = "${var.cluster_name}"
  name = "${var.cluster_name}-<%= vpc[:name] %>-router-secondary"
  count = "${var.<%= vpc[:name] %>_router_count_per_AZ}"
  aws_user_data = "${var.aws_user_data}"

  # Extra tags
<%
config[:extra_vars].each do |key, value|
%>
  <%= key %> = "${var.<%= key %>}"
<% end %>
}

<% if vpc[:availability_zones] == 3 %>
module "apcera-router-tertiary-<%= vpc[:name] %>" {
  source = "../compute-resource-with-tags"

  # Provider configuration
  aws_access_key = "${var.aws_access_key}"
  aws_secret_key = "${var.aws_secret_key}"
  aws_region = "${var.<%= vpc[:name] %>_aws_region}"

  # AWS region/AZ specific config
  aws_availability_zone = "${var.<%= vpc[:name] %>_aws_region}${var.<%= vpc[:name] %>_az_tertiary}"
  aws_ami = "${var.<%= vpc[:name] %>_aws_base_ami}"

  # AWS resource config
  aws_instance_type = "${var.<%= vpc[:name] %>_aws_router_type}"
  aws_ssh_key = "${var.<%= vpc[:name] %>_aws_ssh_key}"

  # VPC specific config
  aws_subnet = "${aws_subnet.<%= vpc[:name] %>-tertiary.id}"
  aws_security_group = "${aws_security_group.<%= vpc[:name] %>-default.id}"

  # Cluster config, sizing, etc
  cluster_name = "${var.cluster_name}"
  name = "${var.cluster_name}-<%= vpc[:name] %>-router-tertiary"
  count = "${var.<%= vpc[:name] %>_router_count_per_AZ}"
  aws_user_data = "${var.aws_user_data}"

  # Extra tags
<%
config[:extra_vars].each do |key, value|
%>
  <%= key %> = "${var.<%= key %>}"
<% end %>
}
<% end # three-zones %> 
<% end %> 
###########
# OUTPUTS #
###########

<%
# Pre-compute the full router address list string
router_addr_list = ""

VPC_list.each_with_index do |vpc, index|
  next unless vpc[:role] == 'workload'
  next unless vpc[:extras] && vpc[:extras].include?("router")
  router_addr_list << ", " unless router_addr_list.empty?
  router_addr_list << "${module.apcera-router-primary-#{vpc[:name]}.addresses}"
  router_addr_list << ", ${module.apcera-router-secondary-#{vpc[:name]}.addresses}"
  if vpc[:availability_zones] == 3
    router_addr_list << ", ${module.apcera-router-tertiary-#{vpc[:name]}.addresses}"
  end
end
%>

output "router-addresses" {
  value = "<%= router_addr_list %>"
}

<%
VPC_list.each_with_index do |vpc, index|
  next unless vpc[:role] == 'workload'
  next unless vpc[:extras] && vpc[:extras].include?("router")
  router_addr_list = "${module.apcera-router-primary-#{vpc[:name]}.addresses}"
  router_addr_list << ", ${module.apcera-router-secondary-#{vpc[:name]}.addresses}"
  if vpc[:availability_zones] == 3
    router_addr_list << ", ${module.apcera-router-tertiary-#{vpc[:name]}.addresses}"
  end
%>
output "<%= vpc[:name] %>-router-addresses" {
  value = "<%= router_addr_list %>"
}

output "<%= vpc[:name] %>-elb-address" {
  value = "${aws_elb.<%= vpc[:name] %>-router.dns_name}"
}
<% end %>
